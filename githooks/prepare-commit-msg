#!/bin/bash
#---------------------------------------------------------------------------------
# 
#  ,--------.,--.                 ,--. ,--.                                   
#  '--.  .--'`--',--,--,--. ,---. |  .'   / ,---.  ,---.  ,---.  ,---. ,--.--.
#     |  |   ,--.|        || .-. :|  .   ' | .-. :| .-. :| .-. || .-. :|  .--'
#     |  |   |  ||  |  |  |\   --.|  |\   \\   --.\   --.| '-' '\   --.|  |   
#     `--'   `--'`--`--`--' `----'`--' '--' `----' `----'|  |-'  `----'`--'   
#
# Name  : prepare-commit-msg
# Desc  : This file is a git prepare commit message hook that will be used to
#         add the time for the current project to the commit that is being
#         committed.
#
#         It is designed with work with the post-commit hook that will update
#         the timekeeper timesheet so that it knows when the commit was done
#         so that it does not keep adding the same time to the commit commit.
#
#         It will add the minutes since the last commit was done.
#
#         Some random minutes may go missing - rounding errors, but this is not
#         that accurate a system, you probably need something else if you really
#         need seconds accuracy.
#
#         This function will add the time to commits and messages as the others
#         could be automatic and produce a lot of automated data that this may
#         interfere with.
#
#         This plugin expects the branch name to end in the job_id, using the
#         following format:
#
#            branch_name#499
#
#         with the job_id == 499, this will produce the following at the bottom
#         of the commit:
#
#            refs #499 @12h49
#
#         which your time tracking app should pick up. If it does not have the
#         time set then the following will be added to the commit:
#
#            project_name.job_name#45312334#46140
#    
#         which is the total project time in seconds, followed by the number of
#         seconds since the last commit. So the time is still tracked in the
#         repository.
#
# Author: pantoine
# Date  : 08/12/2012 08:22:20
#---------------------------------------------------------------------------------
#                     Copyright (c) 2012 Peter Antoine
#                            All rights Reserved.
#                    Released Under the Artistic Licence
#---------------------------------------------------------------------------------

timekeeper_string=''
echo ---------------- called ---------------

function TimeKeeper_GetTimeString ()
{
	# retrieve the current job name from the git repository
	current_project=$(basename `git rev-parse --show-toplevel`)
	current_job=`git rev-parse --abbrev-ref HEAD`

	if [ "$TIMEKEEPER_SPREADSHEET" == "" ];
	then
		TIMEKEEPER_SPREADSHEET="$HOME/.timekeeper.tmk"
	fi

	if [ "$TIMEKEEPER_WORK_ID" == "" ];
	then
		TIMEKEEPER_WORK_ID=${current_job/${current_job%%#[0-9]*}/}
	fi

	# read in the timesheet file
	while IFS=, read -r project job start time last_commit;
	do
		if [ "$current_project" = "$project" ];
		then
			if [ "$current_job" = "$job" ];
			then
				elapsed_time=$((time-last_commit))

				# if we have an issue id then write a ref, else just dump the raw time in the job.
				if [ "$TIMEKEEPER_WORK_ID" != "" ]
				then
					timekeeper_string="refs $TIMEKEEPER_WORK_ID @$(($elapsed_time/(60*60)))h$((($elapsed_time/60)%60))"
				else
					timekeeper_string="$project.$job#$time#$elapsed_time"
				fi
			fi
		fi;
	done < "$TIMEKEEPER_SPREADSHEET"
}

case "$2" in
  squash)	;;
  merge)	;;
  message)
  	echo ---------------- message ---------------
  	TimeKeeper_GetTimeString
  	echo "$timekeeper_string" >> "$1" ;;
  commit)
  	echo ---------------- commit ---------------
  	TimeKeeper_GetTimeString
    echo "$timekeeper_string" >> "$1" ;;
  "")
  	echo ---------------- empty --------------- $timekeeper_string
  	TimeKeeper_GetTimeString
    echo "$timekeeper_string" >> "$1" ;;
  *) echo "--- this one" >> "$1" ;;
esac


