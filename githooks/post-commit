#!/bin/bash
#---------------------------------------------------------------------------------
#
#  ,--------.,--.                 ,--. ,--.                                   
#  '--.  .--'`--',--,--,--. ,---. |  .'   / ,---.  ,---.  ,---.  ,---. ,--.--.
#     |  |   ,--.|        || .-. :|  .   ' | .-. :| .-. :| .-. || .-. :|  .--'
#     |  |   |  ||  |  |  |\   --.|  |\   \\   --.\   --.| '-' '\   --.|  |   
#     `--'   `--'`--`--`--' `----'`--' '--' `----' `----'|  |-'  `----'`--'   
#
#    file: post-commit
#    desc: This is a git commit hook that will amend the timekeeper timesheet
#          to let it know that a commit has happened and time as been assigned to
#          the project.
#
#          All it does is change the last commit elapsed time to the same value
#          as the total time.
#
#  author: 
#    date: 08/12/2012 10:52:42
#---------------------------------------------------------------------------------
#                     Copyright (c) 2012 Peter Antoine
#                            All rights Reserved.
#                    Released Under the Artistic Licence
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------
# update_flat_file
#
# This function update the flat file format.
#---------------------------------------------------------------------------------
function update_flat_file()
{
	if [ "$TIMEKEEPER_TIMESHEET" == "" ];
	then
		# check for local file first
		if [[ -w ".timekeeper.tmk" && -r ".timekeeper.tmk" ]];
		then
			TIMEKEEPER_TIMESHEET=".timekeeper.tmk"
		else
			# if local not found the search for global 
			if [[ -w "$HOME/.timekeeper.tmk" && -r "$HOME/.timekeeper.tmk" ]];
			then
				TIMEKEEPER_TIMESHEET="$HOME/.timekeeper.tmk"
			fi
		fi
	fi

	# default to global
	if [ "$TIMEKEEPER_TIMESHEET" == "" ];
	then
		TIMEKEEPER_TIMESHEET="$HOME/.timekeeper.tmk"
	fi

	# if it's readable/writable - carry on
	if [[ -w "$TIMEKEEPER_TIMESHEET" && -r "$TIMEKEEPER_TIMESHEET" ]];
	then
		local index=0

		# default on -for files that don't have section headers
		local current_section=1

		# read the file
		while IFS=, read -r project job start time last_commit status note;
		do
			string=$project,$job,$start,$time,$last_commit,$status,$note

			# find the current section for the file
			if [ "${project:0:1}" == "[" ] && [ "${project:0-1}" == "]" ]
			then
				line=${project:1:${#project}-2}
				current_section=0

				# if "hostname:username" equal host and user name
				if [ "${line#*:}" == "$USER" ] && [ "${line%:*}" == "$HOSTNAME" ]
				then
					current_section=1
				fi

				string=$project

			elif [ "$current_section" == "1" ] && [ "$current_project" == "$project" ] && [ "$current_job" == "$job" ];
			then
				# set the time to the current time in the file
				string=$project,$job,$start,$time,$time,$status,$note
			fi

			timekeeper_file[$index]="$string"
			index=$(($index+1))
		done < "$TIMEKEEPER_TIMESHEET"

		# write back the timekeeper file
		index=0
		for i in "${timekeeper_file[@]}"
		do
			if [ $index == 0 ];
			then
				echo "$i" > "$TIMEKEEPER_TIMESHEET"
			else
				echo "$i" >> "$TIMEKEEPER_TIMESHEET"
			fi

			index=1
		done
	fi
}

#---------------------------------------------------------------------------------
# update_dir_file
#
# This function will update the timesheet in the directory format.
#---------------------------------------------------------------------------------
function update_dir_file()
{
	if [ "$TIMEKEEPER_DIRECTORY" == "" ];
	then
		# check for local directory
		if [[ -d ".timekeeper" ]];
		then
			TIMEKEEPER_DIRECTORY=".timekeeper"
		else
			# if local not found the search for global 
			if [[ -d "$HOME/.timekeeper" ]];
			then
				TIMEKEEPER_DIRECTORY="$HOME/.timekeeper"
			fi
		fi
	fi

	# can't update if the directory does not exist.
	if [ "$TIMEKEEPER_DIRECTORY" != "" ];
	then
		# create timekeeper filename
		TIMEKEEPER_TIMESHEET="$TIMEKEEPER_DIRECTORY/$HOSTNAME:$USER.tmk"

		# if it's readable/writable - carry on
		if [[ -w "$TIMEKEEPER_TIMESHEET" && -r "$TIMEKEEPER_TIMESHEET" ]];
		then
			local index=0

			# read the file
			while IFS=, read -r project job start time last_commit status note;
			do
				string=$project,$job,$start,$time,$last_commit,$status,$note

				if [ "$current_project" == "$project" ] && [ "$current_job" == "$job" ];
				then
					# set the time to the current time in the file
					string=$project,$job,$start,$time,$time,$status,$note
				fi

				timekeeper_file[$index]="$string"
				index=$(($index+1))
			done < "$TIMEKEEPER_TIMESHEET"

			# write back the timekeeper file
			index=0
			for i in "${timekeeper_file[@]}"
			do
				if [ $index == 0 ];
				then
					echo "$i" > "$TIMEKEEPER_TIMESHEET"
				else
					echo "$i" >> "$TIMEKEEPER_TIMESHEET"
				fi

				index=1
			done
		fi
	fi
}

#---------------------------------------------------------------------------------
# The main code for handling the write back
#---------------------------------------------------------------------------------
if [ "$TIMEKEEPER_DONT_TRACK" != "1" ];
then
	# get the job name
	current_project=$(basename `git rev-parse --show-toplevel`)
	current_job=`git rev-parse --abbrev-ref HEAD`
	
	if [ "$TIMEKEEPER_USE_ANNOTATED_TAG" == "1" ];
	then
		git describe --abbrev=0 2> /dev/null

		if [ $? -eq 0 ]
		then
			current_tag=`git describe --abbrev=0`
			current_tag=${current_tag#$TIMEKEEPER_TAG_PREFIX}
			
			if [ "$current_tag" != "" ]
			then
				current_job=$current_tag
			fi
		fi
	fi
	
	# detect what sort of file needs updating
	if [[ "$TIMEKEEPER_DIRECTORY" == "" ]]
	then
		TIMEKEEPER_DIRECTORY=".timekeeper"
	fi

	if [ "$TIMEKEEPER_USE_FLAT_FILE" == "1" ];
	then
		update_flat_file

	elif [[ -d $TIMEKEEPER_DIRECTORY ]];
	then
		update_dir_file
	
	else
		update_flat_file
	fi

fi
